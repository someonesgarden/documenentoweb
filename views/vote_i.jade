extends layout_i

block header
    link(rel="stylesheet", href="/css/mobile.css")
    script(src="js/lib/common.js")

block content
    nav#myNavbar.navbar.navbar-default.navbar-inverse.navbar-fixed-top(role="navigation")
        div.container
            div.navbar-header
                button.navbar-toggle(type="button", data-toggle="collapse", data-target="#navbarCollapse")
                    span.sr-only Toggle navigation
                    span.icon-bar
                    span.icon-bar
                    span.icon-bar
                a.navbar-brand(href="#")
                    strong DOCUMEMENTO 投票モード

            div.collapse.navbar-collapse#navbarCollapse
                    ul.nav.navbar-nav
                        li
                            a(href="/i") トップ
                        li
                            a(href="/dev") VRモード
                        li.active
                            a(href="/v") ピッチ投票
                        //li
                        //    a(href="/s") 席状況
                        li
                            a(href="/admin") 管理者用

    div.container#AppController(ng-controller="AppController", style="margin-top:56px;")
        div.row(style="height:260px;background-image:url('assets/img/smt/top_img_vote.png');background-size:contain;background-repeat:no-repeat;background-position:50% 50%;")

        div.row.well-lg
            div.infoarea
                div.col.col-xs-3.text-danger
                    p 投票システムについて
                div.col-xs-9
                    p 携帯とPCサイトがリアルタイムに連動してます。サイトの各登壇者の上にある数字が増えたり減ったりします。
                    | 今は実験段階ですので、本番が始まったらカウンターをリセットします。
                br(clear="all")

        div.row.well-lg
            div#vote_list
                div.col.col-xs-12
                            div.row.panel_area(ng-repeat="(key,val) in votes")
                                div.col.col-xs-3
                                    a(href="/assets/site/{{panels[key].img}}.html")
                                        img.panel_img.ng-cloak(src="assets/img/panelists/p_{{panels[key].img?panels[key].img:'dummy'}}.png")
                                div.col.col-xs-9.panel_item
                                    h4.text-right {{panels[key].name}}
                                    p.text-right {{panels[key].title}}
                                div.col-xs-12.vote_sep
                                div.panel_buttons
                                        div.col-xs-6
                                            h3.text-center.vote_button(ng-click="upaction(key)") ↑ <span style="font-size:14px;">投票する</span>
                                        div.col-xs-2
                                            h3.text-center.vote_button(ng-click="downaction(key)") ↓
                                        div.col-xs-4
                                            h3.vote_num {{val ? val+'': '000' | numberFixedLen:3 }}
    script.
        var socketresponse = function (data) {
            console.log("socket response");
            var element = document.getElementById("AppController");
            var $scope = angular.element(element).scope();
            $scope.votes = data.value.votes;
            $scope.votes = votesSort($scope.votes);
            if (!$scope.$$phase) {
                $scope.$apply();
            }
        };


        var socketseatresponse = function(data) {
        };
        var ObjArraySort = function(ary, key, order) {
            var reverse = 1;
            if (order && order.toLowerCase() == "desc")
                reverse = -1;
            ary.sort(function (a, b) {
                if (a[key] < b[key])
                    return -1 * reverse;
                else if (a[key] == b[key])
                    return 0;
                else
                    return 1 * reverse;
            });
        }

        var votesSort = function(obj) {
            var ary = [];
            for (var i = 0; i < Object.keys(obj).length; i++) {
                ary[i] = {'vote': obj[Object.keys(obj)[i]], 'name': Object.keys(obj)[i]};
            }
            ObjArraySort(ary, 'vote', "desc");
            obj = {};
            for (var i = 0; i < ary.length; i++) {
                obj[ary[i].name] = ary[i].vote;
            }
            return obj;
        };

        app.controller('AppController', ['$scope', '$http','$window','$interval', function ($scope, $http,$window,$interval) {


            $scope.panels ={};
            $scope.votes = {};
            $scope.loadVote = function(){

                $http.get('./data/vote.json')
                    .then(function(res){

                        $scope.votes = res.data.vote;
                        $http.get('./data/panelists.json')
                            .then(function (res) {
                                $scope.panels = res.data;
                                angular.forEach($scope.panels, function (val, key) {
                                    val.vote = $scope.votes[key];
                                });
                            });
                    });

                console.log("load data");
            };


            $scope.loadVote();
            var timer = $interval(function () {
                $scope.loadVote();
            }, 1000*5);



            $scope.upaction = function(key){

                var vote = parseInt($scope.panels[key].vote);

                if (vote < 999 && vote != undefined) {
                    vote++;
                } else {
                    vote = 0;
                }


                var vote = ('000'+ vote).slice(-3);
                $scope.panels[key].vote = vote;
                $scope.votes[key] = vote;
                $scope.votes = votesSort($scope.votes);

                if(!$scope.$$phase){
                    $scope.$apply();
                }

                $http.post('/voteapi', $scope.votes)
                    .then(function (res) {
                        $window.socket_voting({
                            name: key,
                            point: vote+"",
                            votes:$scope.votes
                        });
                    });
            };

            $scope.downaction = function(key){

                var vote = parseInt($scope.panels[key].vote);
                if(vote>0 && vote != undefined){
                    vote--;
                }else{
                    vote=0;
                }
                var vote = ('000'+ vote).slice(-3);
                $scope.panels[key].vote = vote;
                $scope.votes[key] = vote;
                $scope.votes = votesSort($scope.votes);
                if (!$scope.$$phase) {
                    $scope.$apply();
                }

                $http.post('/voteapi', $scope.votes)
                    .then(function(res){
                        $window.socket_voting({
                            name: key,
                            point: vote+"",
                            votes: $scope.votes
                        });
                    });
            };
        }]);