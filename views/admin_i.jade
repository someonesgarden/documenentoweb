extends layout_i

block header
    link(rel="stylesheet", href="/css/mobile.css")
    script(src="js/lib/common.js")

block content
    nav#myNavbar.navbar.navbar-default.navbar-inverse.navbar-fixed-top(role="navigation")
        div.container
            div.navbar-header
                button.navbar-toggle(type="button", data-toggle="collapse", data-target="#navbarCollapse")
                    span.sr-only Toggle navigation
                    span.icon-bar
                    span.icon-bar
                    span.icon-bar
                a.navbar-brand(href="#")
                    strong DOCUMEMENTO 席情報

            div.collapse.navbar-collapse#navbarCollapse
                ul.nav.navbar-nav
                    li
                        a(href="/i") トップ
                    li
                        a(href="/dev") VRモード
                    li
                        a(href="/v") ピッチ投票
                    li.active
                        a(href="/s") 席状況
                    li
                        a(href="/admin") 管理者用

    div.container#AppController(ng-controller="AppController", style="margin-top:57px;")
        div.row.well-lg
            div.col-xs-12
            h2 管理用
        div.row.well-lg
            p.btn.btn-default.btn-group-justified(ng-click="resetvotes()") 投票をリセットする


        //div.row.well-lg
        //    div#seat_list.col.col-xs-12
        //
        //        div.row.panel_area(ng-repeat="(key,val) in seats")
        //            div.col-xs-12.date_area
        //                h1 {{parseDate(val.date) | date:'M/d'}} {{val.time}} <span style="float:right;">@{{val.venue}}</span>
        //
        //            div.col-xs-4
        //                h3 予約数 {{val.num | numberFixedLen:2 }}
        //            div.col-xs-4(style="background-color:#fff;")
        //                h3.text-center.vote_button.nr(ng-click="upaction(key,'num')") ↑
        //            div.col-xs-4(style="background-color:#aaa;")
        //                h3.text-center.vote_button.nr(ng-click="downaction(key,'num')") ↓
        //
        //            div.col-xs-4
        //                h3(style="color:orange") 最大数 {{val.max | numberFixedLen:2 }}
        //            div.col-xs-4(style="background-color:#ffe;")
        //                h3.text-center.vote_button.nr(style="color:orange", ng-click="upaction(key,'max')") ↑
        //            div.col-xs-4(style="background-color:#bba;")
        //                h3.text-center.vote_button.nr(style="color:orange", ng-click="downaction(key,'max')") ↓
        //
        //            div.col.col-xs-4
        //                img.panel_img.ng-cloak(src="assets/img/smt/programs/prog_{{key}}.png")
        //            div.col.col-xs-8.panel_item.text-right
        //                h3(ng-bind-html="val.subtitle")
        //                h4.text-right(ng-bind-html="val.title")
    script.
        var socketresponse = function (data) {
            console.log(data.value);
            var element = document.getElementById("AppController");
            var $scope = angular.element(element).scope();

            $scope.votes[data.value.name] = data.value.point;
            $scope.votes = votesSort($scope.votes);
            if (!$scope.$$phase) {
                $scope.$apply();
            }
        };

        app.controller('AppController', ['$scope', '$http', '$window', function ($scope, $http, $window) {

            $scope.programs = {};
            $scope.votes = {};
            d3.json("data/vote.json", function (error, data) {
                $scope.votes = data.vote;
            });


            $scope.resetvotes = function(){
                angular.forEach($scope.votes, function (val, key) {
                    $scope.votes[key] = "000";
                });
                $http.post('/voteapi', $scope.votes)
                    .then(function (res) {
                        $window.socket_voting({
                            name: "reset",
                            point:  "000",
                            votes:$scope.votes
                        });
                    });

            }

            $scope.parseDate = function (d) {
                var rep = d.replace(/-/g, "/");
                date = Date.parse(rep);
                return new Date(date);
            }

            $http.get('./data/seats.json')
                .then(function (res) {
                    $scope.seats = res.data.seats;
                });

            $scope.upaction = function (key,mode) {
                var num = parseInt($scope.seats[key].num);
                var max = parseInt($scope.seats[key].max);

                switch(mode){
                    //mode="num"
                    case "num":
                        if(num<max){
                            num++;
                            num = ('00' + num).slice(-2);
                            $scope.seats[key].num = num+"";
                        }
                        break;
                    default:
                        max++;
                        max = ('00' + max).slice(-2);
                        $scope.seats[key].max = max+"";
                        break;
                }
                $http.post('/seatapi', $scope.seats)
                    .then(function (res) {
                        $window.socket_seating({
                            name: key,
                            seats: $scope.seats
                        });
                    });
            };

            $scope.downaction = function (key, mode) {
                var num = parseInt($scope.seats[key].num);
                var max = parseInt($scope.seats[key].max);

                switch (mode){
                    case "num":
                        if (num > 0 ) {
                            num--;
                            num = ('00' + num).slice(-2);
                            $scope.seats[key].num = num+"";
                        }
                        break;
                    default:
                        if(max>0){
                            max--;
                            max = ('00' + max).slice(-2);
                            $scope.seats[key].max = max+"";
                        }
                        break;
                }
                $http.post('/seatapi', $scope.seats)
                    .then(function (res) {
                        $window.socket_seating({
                            name: key,
                            seats: $scope.seats
                        });
                    });
            };
        }]);